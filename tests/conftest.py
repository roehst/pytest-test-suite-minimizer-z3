"""Test utilities and fixtures for the test suite."""

import os
import tempfile
import shutil
from pathlib import Path
from typing import Dict, Any
import pytest
import coverage


@pytest.fixture
def temp_dir():
    """Create a temporary directory for test files."""
    temp_path = tempfile.mkdtemp()
    yield temp_path
    shutil.rmtree(temp_path)


@pytest.fixture
def sample_coverage_data(temp_dir):
    """Create sample coverage data for testing."""
    coverage_file = os.path.join(temp_dir, ".coverage")
    
    # Create a coverage data file with test contexts
    cov = coverage.Coverage(data_file=coverage_file)
    
    # Mock some coverage data
    # This would normally be generated by running tests with coverage
    data = cov.get_data()
    
    # We'll create this data programmatically for testing
    # In a real scenario, this would come from running actual tests
    
    yield coverage_file


@pytest.fixture
def mock_coverage_data(temp_dir):
    """Create mock coverage data with predictable patterns."""
    coverage_file = os.path.join(temp_dir, ".coverage")
    
    # Create a simple coverage file that we can use for testing
    # We'll create the raw data structure that coverage.py would generate
    import sqlite3
    
    # Coverage.py uses SQLite to store data
    conn = sqlite3.connect(coverage_file)
    
    # Create the basic schema that coverage.py uses
    conn.execute('''
        CREATE TABLE file (
            id integer primary key,
            path text unique
        )
    ''')
    
    conn.execute('''
        CREATE TABLE context (
            id integer primary key,
            context text unique
        )
    ''')
    
    conn.execute('''
        CREATE TABLE line (
            file_id integer,
            context_id integer,
            lineno integer,
            unique(file_id, context_id, lineno)
        )
    ''')
    
    # Insert some test data
    files = [
        "test_module.py",
        "another_module.py"
    ]
    
    contexts = [
        "test:test_module.py::test_function_a|run",
        "test:test_module.py::test_function_b|run", 
        "test:another_module.py::test_function_c|run"
    ]
    
    # Insert files
    for i, file_path in enumerate(files, 1):
        conn.execute("INSERT INTO file (id, path) VALUES (?, ?)", (i, file_path))
    
    # Insert contexts
    for i, context in enumerate(contexts, 1):
        conn.execute("INSERT INTO context (id, context) VALUES (?, ?)", (i, context))
    
    # Insert line coverage data
    # test_function_a covers lines 1-5 in test_module.py
    for line in range(1, 6):
        conn.execute("INSERT INTO line (file_id, context_id, lineno) VALUES (?, ?, ?)", (1, 1, line))
    
    # test_function_b covers lines 3-8 in test_module.py (overlapping)
    for line in range(3, 9):
        conn.execute("INSERT INTO line (file_id, context_id, lineno) VALUES (?, ?, ?)", (1, 2, line))
    
    # test_function_c covers lines 1-3 in another_module.py
    for line in range(1, 4):
        conn.execute("INSERT INTO line (file_id, context_id, lineno) VALUES (?, ?, ?)", (2, 3, line))
    
    conn.commit()
    conn.close()
    
    yield coverage_file


@pytest.fixture
def sample_test_files(temp_dir):
    """Create sample test files for integration testing."""
    test_dir = Path(temp_dir) / "sample_tests"
    test_dir.mkdir()
    
    # Create a simple module to test
    module_file = test_dir / "sample_module.py"
    module_file.write_text('''
def add(a, b):
    """Add two numbers."""
    return a + b

def multiply(a, b):
    """Multiply two numbers."""
    if a == 0 or b == 0:
        return 0
    return a * b

def divide(a, b):
    """Divide two numbers."""
    if b == 0:
        raise ValueError("Cannot divide by zero")
    return a / b
''')
    
    # Create test files
    test_file = test_dir / "test_sample.py"
    test_file.write_text('''
import pytest
from sample_module import add, multiply, divide

def test_add():
    """Test addition function."""
    assert add(2, 3) == 5
    assert add(-1, 1) == 0

def test_multiply():
    """Test multiplication function."""
    assert multiply(2, 3) == 6
    assert multiply(0, 5) == 0

def test_divide():
    """Test division function."""
    assert divide(6, 2) == 3
    with pytest.raises(ValueError):
        divide(5, 0)
''')
    
    conftest_file = test_dir / "conftest.py"
    conftest_file.write_text('# Test configuration file\n')
    
    return test_dir


class MockPytestConfig:
    """Mock pytest config for testing."""
    
    def __init__(self, **options):
        # Set default options
        default_options = {
            'minimize_tests': False,
            'minimizer_output': None,
            'minimizer_verbose': False
        }
        default_options.update(options)
        self.option = type('Option', (), default_options)()
        self.pluginmanager = MockPluginManager()


class MockPluginManager:
    """Mock pytest plugin manager."""
    
    def __init__(self):
        self.registered_plugins = []
    
    def register(self, plugin, name=None):
        self.registered_plugins.append((plugin, name))


class MockSession:
    """Mock pytest session for testing."""
    
    def __init__(self):
        self.items = []